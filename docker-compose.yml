version: '3.8'

services:
  transcriber:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # Puoi cambiare il modello qui se vuoi ricreare l'immagine con un modello diverso
        # Modelli disponibili: tiny, base, small, medium, large
        # Per l'italiano, 'small' è un buon compromesso tra velocità e accuratezza su CPU.
        WHISPER_MODEL_ARG: small
    image: trascrizione-app # Diamo un nome all'immagine buildata
    container_name: transcriber_service
    volumes:
      # Volume per i file audio di input
      - ./audio_input:/app/audio_input:rw
      # Volume per i file di trascrizione di output
      - ./transcriptions_output:/app/transcriptions_output:rw
      # Volume per i dati persistenti (checkpoint, WAV convertiti, segmenti)
      # Assicurati che Docker abbia i permessi per scrivere in questa directory sull'host
      - ./persistent_data:/app/persistent_data:rw
      # Cache per i modelli Whisper, per evitare di riscaricarli se il container viene ricreato
      # senza che l'immagine sia cambiata.
      - whisper_cache:/root/.cache/whisper 
    environment:
      # Modello da usare per la trascrizione (può essere sovrascritto al runtime)
      - WHISPER_MODEL=small # tiny, base, small, medium, large
      # Lingua dell'audio (es. 'it' per italiano). Se non specificato, Whisper la rileva.
      - AUDIO_LANGUAGE=it
      # Durata massima di una sessione di trascrizione in secondi (es. 10 ore = 36000)
      # Mezza giornata = 12 ore = 12 * 3600 = 43200 secondi
      - MAX_SESSION_DURATION_SECONDS=43200 
      # Durata di ogni segmento audio in millisecondi (es. 10 minuti = 600000)
      - CHUNK_DURATION_MS=600000 # 10 minuti
    # Per eseguire: docker-compose run --rm transcriber /app/audio_input/nomefile.mp3 /app/transcriptions_output/nomefile.txt
    # Il --rm pulisce il container dopo l'esecuzione.
    # Non definiamo un 'command' qui perché lo passeremo con 'docker-compose run'

volumes:
  whisper_cache: # Definisce il volume nominato per la cache di Whisper